class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        # Step 1. Build the Graph
        graph = collections.defaultdict(dict)
        for (x, y), val in zip(equations,values):
            graph[x][y] = val
            graph[y][x] = 1.0 / val
        print(graph)
        
        # Step 2. DFS function
        def dfs(x, y, visited):
            # neither x not y exists
            if x not in graph or y not in graph:
                return -1.0
            
            # x points to y
            if y in graph[x]:
                return graph[x][y]
            
            # x maybe connected to y through other nodes
            # use dfs to see if there is a path from x to y
            for i in graph[x]:
                if i not in visited:
                    visited.add(i)
                    temp = dfs(i, y, visited)
                    if temp == -1:
                        continue
                    else:
                        return graph[x][i] * temp
            return -1
            
        # go through each of the queries and find the value
        res = []
        for query in queries:
            res.append(dfs(query[0], query[1], set()))
        return res

class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        graph = defaultdict(defaultdict)
        
        
        def backtrack_evalute(curr_node, target_node, acc_product, visited):
            visited.add(curr_node)
            ret = -1.0
            neighbours = graph[curr_node]
            if target_node in neighbours:
                ret = acc_product * neighbours[target_node]
            else:
                for neighbor, value in neighbours.items():
                    if neighbor in visited:
                        continue
                    ret = backtrack_evalute(neighbor, target_node, acc_product * value, visited)
                    if ret != -1.0:
                        break
            visited.remove(curr_node)
            return ret
                
            
        for (dividend, divisor), value in zip(equations, values):
            graph[dividend][divisor] = value
            graph[divisor][dividend] = 1 / value
            
        results = []
        
        for dividend, divisor in queries:
            if dividend not in graph or divisor not in graph:
                ret = -1
            elif dividend == divisor:
                ret = 1
            else:
                visited = set()
                ret = backtrack_evalute(dividend, divisor, 1, visited)
            results.append(ret)
            
        return results
